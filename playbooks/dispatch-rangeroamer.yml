- name: Go get the golf balls
  hosts: localhost
  gather_facts: false
  vars:
    dt_tenant:
    dt_token:
    swingsight_url:

  tasks:

  - name: Query the total_balls_hit metric from Dynatrace
    ansible.builtin.uri:
      url: "https://{{ dt_tenant }}/api/v2/metrics/query?metricSelector=total_balls_hit"
      method: GET
      headers:
        Authorization: "Api-Token {{ dt_token }}"
        Content-Type: "application/json"
    register: query_total_balls_hit

  - name: Extract the last non-zero and non-null value
    ansible.builtin.set_fact:
      last_valid_value: "{{ (query_total_balls_hit.json.result[0].data[0].values | reject('eq', null) | reject('eq', 0) | list | last) | default('No valid data found') }}"


  - name: Fetch metrics from the application
    ansible.builtin.uri:
      url: "{{ swingsight_url }}"
      method: GET
      return_content: yes
    register: metrics_response

  - name: Parse and set facts for metrics
    ansible.builtin.set_fact:
      count_zone_1: "{{ metrics_response.content | regex_search('count_zone_1 (\\d+)') | first | int }}"
      count_zone_2: "{{ metrics_response.content | regex_search('count_zone_2 (\\d+)') | first | int }}"
      count_zone_3: "{{ metrics_response.content | regex_search('count_zone_3 (\\d+)') | first | int }}"

  - name: Determine the highest zone count
    ansible.builtin.set_fact:
      highest_metric: "{{ {'count_zone_1': count_zone_1, 'count_zone_2': count_zone_2, 'count_zone_3': count_zone_3} | dictsort(by='value') | last }}"

  - name: Display the highest metric
    ansible.builtin.debug:
      msg: "The highest metric is {{ highest_metric }}"
